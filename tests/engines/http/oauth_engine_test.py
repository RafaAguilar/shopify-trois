from ... import ShopifyTroisTestCase

from shopify_trois.exceptions import ShopifyException

from shopify_trois import Credentials

from shopify_trois.engines.http.oauth_engine import OAuthEngine

from shopify_trois.engines.http.request import Request

class OAuthEngineTestCase(ShopifyTroisTestCase):

    def test_class(self):
        expected = "https://{shop_name}.myshopify.com/admin"
        self.assertEqual(OAuthEngine._api_base, expected)

        expected = "{base_url}/oauth/authorize"
        self.assertEqual(OAuthEngine._authorize_url, expected)

        self.assertEqual(OAuthEngine.extension, "")
        self.assertEqual(OAuthEngine.mime, "")

    def test_oauth_authorize_url(self):

        credentials = Credentials()
        shopify = OAuthEngine(shop_name = 'test', credentials = credentials)

        credentials.scope = ['yup']
        url = shopify.oauth_authorize_url(redirect_to = 'http://localhost/installed')
        expected = "https://test.myshopify.com/admin/oauth/authorize?client_id=&scope=yup&redirect_to=http%3A%2F%2Flocalhost%2Finstalled"
        self.assertEquals(url, expected)

        url = shopify.oauth_authorize_url()
        expected = "https://test.myshopify.com/admin/oauth/authorize?client_id=&scope=yup"
        self.assertEquals(url, expected)

        api_key = "2e6fff2c-e28d-11e2-b6bf-4061860bdbf3"
        credentials.api_key = api_key

        url = shopify.oauth_authorize_url()
        expected = "https://test.myshopify.com/admin/oauth/authorize?client_id={api_key}&scope=yup".format(api_key = api_key)
        self.assertEquals(url, expected)

        credentials.scope = ["fun", "things", "to", "scope", "W$%3'#"]
        url = shopify.oauth_authorize_url()
        expected = "https://test.myshopify.com/admin/oauth/authorize?client_id=2e6fff2c-e28d-11e2-b6bf-4061860bdbf3&scope=fun%2Cthings%2Cto%2Cscope%2CW%24%253%27%23"
        self.assertEquals(url, expected)

    def test_oauth_access_token_url(self):

        credentials = Credentials()
        shopify = OAuthEngine(shop_name = 'test', credentials = credentials)

        expected = "https://test.myshopify.com/admin/oauth/access_token?client_id=&client_secret=&code="
        url =  shopify.oauth_access_token_url()
        self.assertEqual(url, expected)

        credentials.api_key = api_key = "2e6fff2c-e28d-11e2-b6bf-4061860bdbf3"
        credentials.secret = secret = "mmmmsecret"
        credentials.code = code = "loremipsum"

        expected = "https://test.myshopify.com/admin/oauth/access_token?client_id={api_key}&client_secret={secret}&code={code}".format(api_key=api_key, secret=secret, code=code)
        url =  shopify.oauth_access_token_url()
        self.assertEqual(url, expected)

    def test_url_for_request(self):
        credentials = Credentials()
        shopify = OAuthEngine(shop_name = 'test', credentials = credentials)

        request = Request()
        request.resource = "test"
        url = shopify.url_for_request(request)
        # Note: the base request class does not have an extension.
        expected = "https://test.myshopify.com/admin/test."
        self.assertEquals(url, expected)

        request.resource = "test/mmmm food"
        url = shopify.url_for_request(request)
        # Note: The url generated by url_for_request are not escaped. The
        # actual request.{method} will escape the url for us.
        expected = "https://test.myshopify.com/admin/test/mmmm food."
        self.assertEquals(url, expected)
